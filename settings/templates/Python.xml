<templateSet group="Python">
  <template name="char fields name" value="name = fields.Char(string=u'单据编号', required=True,copy=False, readonly=True, states=READONLY_STATES, index=True, default=lambda self: u'New')" description="自动编号" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2one fields user_id" value="user_id = fields.Many2one('res.users', string=u'负责人', index=True, track_visibility='onchange',&#10;                              default=lambda self: self.env.user, states=READONLY_STATES)" description="用户" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="text fields note" value="note = fields.Text(u'备注', states=READONLY_STATES, track_visibility='onchange')&#10;" description="备注" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields bool active" value="active = fields.Boolean(default=True, string='是否归档', track_visibility='onchange')" description="是否归档" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2one fields company_id" value="company_id = fields.Many2one('res.company', u'公司',&#10;                                 default=lambda self: self.env['res.company']._company_default_get(self._name),&#10;                                 states=READONLY_STATES, track_visibility='onchange')" description="公司" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields selecton state" value="state = fields.Selection([&#10;    (u'草稿', u'草稿'),&#10;    (u'处理中', u'处理中'),&#10;    (u'已审核', u'已审核'),&#10;], u'单据状态', readonly=True, copy=False, default=u'草稿',&#10;    track_visibility='onchange')" description="状态" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="datetime fields date_order" value="date_order = fields.Datetime(string=u'单据日期', required=True, readonly=True, index=True,&#10;                                 states=READONLY_STATES, copy=False,&#10;                                 default=fields.Datetime.now)&#10;" description="长日期" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="date fields delivery_date" value="delivery_date = fields.Date(u'客户交期', track_visibility='onchange', states=READONLY_STATES)" description="短日期" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="int fields sequence" value="sequence = fields.Integer(string=u'排序', default=10)" description="排序" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="float fields product_uom_qty" value="product_uom_qty = fields.Float(string=u'数量', required=True, default=1.0)" description="数量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2one fields order_id" value="order_id = fields.Many2one('models', string=u'明细', required=True, ondelete='cascade', index=True, copy=False)" description="明细" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="one2many fields order_line" value="order_line = fields.One2many('models', 'order_id', string=u'明细行', states=READONLY_STATES, copy=True, auto_join=True)" description="明细行" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs required" value="required=True," description="required=True" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs copy" value="copy=False," description="copy=False" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs readonly" value="readonly=True," description="readonly=True" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs default" value="default=u'草稿'," description="default=u'草稿'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="default datetime" value="default=fields.Datetime.now," description="default=fields.Datetime.now" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs oldname" value="oldname='fields'," description="oldname='fields'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="store" value="store=True," description="store=True" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="change_default" value="change_default=True," description="别的字段的缺省值是否可依赖于本字段，缺省值为False change_default=True" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="track_visibility onchange" value="track_visibility='onchange'," description="track_visibility='onchange' 变化时显示" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs related" value="related='order_line.product_id'," description="related='order_line.product_id'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="default user" value="default=lambda self: self.env.user" description="default=lambda self: self.env.user" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="monetary fields amount" value="&#10;@api.depends('order_line.price_total')&#10;def _amount_all(self):&#10;    for order in self:&#10;        amount_total  = 0.0&#10;        for line in order.order_line:&#10;            amount_total += line.price_subtotal&#10;        order.update({&#10;            'amount_total': amount_total,&#10;        })&#10;&#10;amount_total = fields.Monetary(string='Total', store=True, readonly=True, compute='_amount_all', track_visibility='always')&#10;" description="金额合计" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="selection fields type" value="type = fields.Selection([&#10;    (u'default', u'默认'),&#10;], string=u'类型', default=u'default')" description="类型" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="selection add type" value="type = fields.Selection(selection_add=[('name',u'名称')])" description="增加类型" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="models models" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# Odoo Connector&#10;# QQ:35350428&#10;# 邮件:sale@100china.cn&#10;# 手机：13584935775&#10;# 作者：'amos'&#10;# 公司网址： www.odoo.pw  www.100china.cn&#10;# Copyright 昆山一百计算机有限公司 2012-2016 Amos&#10;# 日期：2014-06-18&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;&#10;import uuid&#10;from itertools import groupby&#10;from datetime import datetime, timedelta&#10;from werkzeug.urls import url_encode&#10;from odoo.osv import expression&#10;from odoo.tools import float_is_zero, float_compare, DEFAULT_SERVER_DATETIME_FORMAT&#10;from odoo.tools.misc import formatLang&#10;from odoo.addons import decimal_precision as dp&#10;from odoo import api, fields, models, tools, SUPERUSER_ID, _&#10;from odoo.exceptions import AccessDenied, AccessError, UserError, ValidationError&#10;from odoo.osv import expression&#10;&#10;&#10;class ir_log(models.Model):&#10;    _name = 'models'&#10;    _description = u'表名'&#10;    _log_access = False&#10;    _order = 'id desc'&#10;&#10;&#10;&#10;    name = fields.Text(string=u'名称', )&#10;" description="完整对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class unlink" value="@api.multi&#10;def unlink(self):&#10;    for order in self:&#10;        if order.state != u'草稿':&#10;            raise UserError(u'只能删除草稿单据!')&#10;        self.env['amos.workflow'].sudo().search([('res_model', '=', self._name), ('res_id', '=', order.id)]).unlink()&#10;        self.env['ir.message'].sudo().search([('res_model', '=', self._name), ('res_id', '=', order.id)]).unlink()&#10;    return super($pyClassName$, self).unlink()" description="删除" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="onchange partner_id" value="&#10;@api.multi&#10;@api.onchange('partner_id')&#10;def onchange_partner_id(self):&#10;    if not self.partner_id:&#10;        self.update({&#10;            'delivery_method': False,&#10;            'payment_method': False,&#10;        })&#10;        return&#10;&#10;    values = {}&#10;    if self.partner_id.user_id:&#10;        values['user_id'] = self.partner_id.user_id.id&#10;    if self.partner_id.delivery_method:&#10;        values['delivery_method'] = self.partner_id.delivery_method&#10;    if self.partner_id.payment_method:&#10;        values['payment_method'] = self.partner_id.payment_method&#10;    self.update(values)&#10;" description="下拉客户" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="onchange product_id" value="&#10;&#10;@api.multi&#10;@api.onchange('product_id')&#10;def onchange_product_id(self):&#10;    if not self.product_id:&#10;        return {'domain': {'product_uom': []}}&#10;    if self.product_id:&#10;        self.product_uom = self.product_id.uom_id.name&#10;        name = self.product_id.name&#10;        if self.product_id.default_code:&#10;            name = '[' + self.product_id.default_code + ']' + name&#10;        if self.product_id.specification:&#10;            name = name + ' ' + self.product_id.specification&#10;        self.name = name&#10;        self.price_unit = self.product_id.purchase_price or 0.00&#10;" description="下拉产品" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="manifest" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# Odoo Connector&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'odoo'&#10;# 公司网址： www.odoo.pw  www.100china.cn www.amoserp.com&#10;# Copyright 昆山一百计算机有限公司 2012-2017 Amos&#10;# 日期：2017-11-10 05:28:50.339145&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;{&#10;    'name': u'AmosERP odoo10.0 模板',&#10;    'summary': u'描述,',&#10;    'category': u'分类',&#10;    'sequence': 0,&#10;    'author': u'Amos',&#10;    'website': 'http://i.youku.com/amoserp',&#10;    'depends': ['base'],&#10;    'version': '0.1',&#10;    'data': [&#10;        'views/sale_order.xml',&#10;    ],&#10;    'demo': [&#10;    ],&#10;    'qweb': [&#10;    ],&#10;    'installable': True,&#10;    'application': True,&#10;    'auto_install': False,&#10;    'description': u&quot;&quot;&quot;&#10;    功能解说&#10;&quot;&quot;&quot;,&#10;}&#10;&#10;# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:&#10;" description="模块定义" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="with_context" value="with_context(lang=self.partner_id.lang)" description="对象上下文传值" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class create" value="@api.model&#10;def create(self, vals):&#10;    if vals.get('name', 'New') == 'New':&#10;        if 'company_id' in vals:&#10;            vals['name'] = self.env['ir.sequence'].with_context(force_company=vals['company_id']).next_by_code(self._name) or 'New'&#10;        else:&#10;            vals['name'] = self.env['ir.sequence'].next_by_code(self._name) or 'New'&#10;            &#10;            &#10;    if any(f not in vals for f in ['partner_invoice_id', 'partner_shipping_id']):&#10;        partner = self.env['res.partner'].browse(vals.get('partner_id'))&#10;        addr = partner.address_get(['delivery', 'invoice'])&#10;        if addr['invoice']:&#10;            vals['partner_invoice_id'] = vals.setdefault('partner_invoice_id', addr['invoice'])&#10;        else:&#10;            vals['partner_invoice_id'] = vals.get('partner_id')&#10;        if addr['delivery']:&#10;            vals['partner_shipping_id'] = vals.setdefault('partner_shipping_id', addr['delivery'])&#10;        else:&#10;            vals['partner_shipping_id'] = vals.get('partner_id')&#10;&#10;    line = super($pyClassName$, self).create(vals)&#10;    #:::::如果创建有编号就提交到查询库 开始&#10;    values = {&#10;        'name': vals['name'].upper(),&#10;        'odd_numbers': vals['name'].upper(),&#10;        'ref': self._name + ',' + str(line.id),&#10;    }&#10;    self.env['global.search'].sudo().create(values)&#10;    #:::::结束&#10;    return line" description="创建" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_get" value="&#10;@api.multi&#10;def name_get(self):&#10;    result = []&#10;    for pl in self:&#10;        name = '[' + pl.name + '] ' + pl.partner_id.name&#10;        result.append((pl.id, name))&#10;    return result" description="显式名称" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="open_message" value="&#10;&#10;@api.multi&#10;def open_message(self):&#10;    context = dict(self.env.context or {})&#10;    context['mobile'] = self.partner_id.mobile&#10;    context['ref'] = '%s,%s' % (self._name, self.id)&#10;    context['partner_id'] = self.partner_id.id&#10;    context['name'] = u'%s:%s 交货日期:%s,请注意查收!' % (self._description, self.name, self.delivery_date)&#10;    return {&#10;        'name': u'发短信',&#10;        'view_type': 'form',&#10;        'view_mode': 'form',&#10;        'res_model': 'ir.message',&#10;        'view_id': self.env.ref('Amos_Base.view_form_message_wizard').id,&#10;        'type': 'ir.actions.act_window',&#10;        'res_id': False,&#10;        'context': context,&#10;        'target': 'new'&#10;    }" description="打开发送短信窗口" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button_robot" value="@api.multi&#10;def button_robot(self):&#10;    return True&#10;" description="自动化" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button_dummy" value="&#10;@api.multi&#10;def button_dummy(self):&#10;    return True&#10;" description="虚拟按钮" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_sql_constraints" value="_sql_constraints = [&#10;    ('name_uniq', 'unique(name, company_id)', u'名称与公司必须唯一!'),&#10;]" description="数据约束uniq" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print_quotation" value="&#10;@api.multi&#10;def print_quotation(self):&#10;    self.filtered(lambda s: s.state == 'draft').write({'state': 'sent'})&#10;    return self.env['report'].get_action(self, 'sale.report_saleorder')&#10;" description="打印" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_inherit" value="_inherit = 'stock.picking'" description="继承" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs group_operator sum" value="group_operator=&quot;sum&quot;" description="group_operator=&quot;sum&quot;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs group_operator avg" value="group_operator=&quot;avg&quot;" description="group_operator=&quot;avg&quot;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs domain" value="domain=[('important', '=', True)]" description="domain=[('important', '=', True)]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ondelete cascade" value="ondelete='cascade'" description="ondelete='cascade'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="compute" value="compute='_compute_name'," description="compute='_compute_name'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields search size" value="&#10;size = fields.Integer(compute='_compute_size', search='_search_size')&#10;&#10;&#10;def _search_size(self, operator, value):&#10;    if operator not in ('=', '!=', '&lt;', '&lt;=', '&gt;', '&gt;=', 'in', 'not in'):&#10;        return []&#10;    # 检索与特定SQL查询匹配的所有消息&#10;    query = &quot;&quot;&quot;SELECT id FROM &quot;%s&quot; WHERE char_length(&quot;body&quot;) %s %%s&quot;&quot;&quot; % \&#10;            (self._table, operator)&#10;    self.env.cr.execute(query, (value,))&#10;    ids = [t[0] for t in self.env.cr.fetchall()]&#10;    return [('id', 'in', ids)]&#10;&#10;" description="字段长度检索" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_inherits" value="_inherits = {'stock.picking': 'stock_borrow_in_id'}" description="继承" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs digits" value="digits=(10, 2)" description="digits=(10, 2)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs size" value="size=16" description="size=16" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_rec_name" value="_rec_name = 'value'" description="对外显式字段_rec_name = 'value'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="html fields html" value="html = fields.Html()" description="html = fields.Html()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2many fields" value="some_ids = fields.Many2many('models', 'a_b_rel', 'a_id', 'b_id')&#10;" description="多对多" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs translate" value="translate=True" description="翻译字段 translate=True" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs string" value="string='Action Description'," description="string=u'标签'," toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs help" value="help=u'帮助'" description="help=u'帮助'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="reference" value="&#10;@api.model&#10;def _select_objects(self):&#10;    records = self.env['ir.model'].search([])&#10;    return [(record.model, record.name) for record in records] + [('', '')]&#10;id_object = fields.Reference(string=u'关联', selection='_select_objects')" description="查询对象ID字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="orm browse" value="self.env['models'].browse(id)" description="读取对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="orm create" value="values = {&#10;    'name': u'',&#10;}&#10;obj = self.env['models'].sudo().create(values)" description="self.create({})" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="orm write" value="values = {&#10;    'state': u'已审核',&#10;}&#10;self.sudo().write(values)" description="self.write({})" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="search orm" value="obj = self.env['models'].search([('name', '=', '')], order=&quot;sequence, id desc&quot;, limit=1)" description="查询" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="search_count orm" value="domain = [('company_id', '=', self.env.ref('base.main_company').id)]&#10;rows_count = self.env['account.account'].search_count(domain):" description="记录总数" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_search" value="@api.model&#10;def name_search(self, name, args=None, operator='ilike', limit=100):&#10;    args = args or []&#10;    domain = []&#10;    if name:&#10;        domain = ['|', ('code', '=ilike', name + '%'), ('name', operator, name)]&#10;        if operator in expression.NEGATIVE_TERM_OPERATORS:&#10;            domain = ['&amp;', '!'] + domain[1:]&#10;    obj = self.search(domain + args, limit=limit)&#10;    return obj.name_get()&#10;    &#10;&#10;@api.multi&#10;@api.depends('name', 'code')&#10;def name_get(self):&#10;    result = []&#10;    for obj in self:&#10;        name = obj.code + ' ' + obj.name&#10;        result.append((obj.id, name))&#10;    return result" description="查询名称" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class copy" value="&#10;@api.one&#10;@api.returns('self', lambda value: value.id)&#10;def copy(self, default=None):&#10;    default = dict(default or {})&#10;    default.update(&#10;        code=_(&quot;%s (copy)&quot;) % (self.code or ''),&#10;        name=_(&quot;%s (copy)&quot;) % (self.name or ''))&#10;    return super($pyClassName$, self).copy(default)" description="复制" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class write" value="@api.multi&#10;def write(self, vals):&#10;    if (vals.get('acc_type') == 'iban') and vals.get('acc_number'):&#10;        vals['acc_number'] = pretty_iban(normalize_iban(vals['acc_number']))&#10;    return super($pyClassName$, self).write(vals)" description="修改" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="order 2" value="_order = 'sequence asc'" description="_order = 'sequence asc'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ref" value="self.env.ref('account.data_account_type_current_assets').id" description="视图id" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="search_read orm" value="model_data = self.env['model'].search_read([('module', '=', context.get(&quot;default_charts&quot;))], ['res_id'])&#10;if model_data:&#10;    chart_id = model_data[0]['res_id']" description="查询指定字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="index True" value="index=True" description="index=True" toReformat="false" toShortenFQNames="true" />
  <template name="fields default" value="type_ = self._fields['type'].default(self)" description="逻辑内读取字段默认值type_ = self._fields['type'].default(self)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="default date" value="default=lambda self: fields.Date.today() + ' 00:00:00')" description="default=lambda self: fields.Date.today() + ' 00:00:00')" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2one company_id" value="company_id = fields.Many2one('res.company', string=u'公司',default=lambda self: self.env.user.company_id)&#10;" description="公司字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="open_parent views" value="@api.multi&#10;def open_parent(self):&#10;    &quot;&quot;&quot; 打开指定视图 &quot;&quot;&quot;&#10;    self.ensure_one()&#10;    address_form_id = self.env.ref('base.view_partner_address_form').id&#10;    return {'type': 'ir.actions.act_window',&#10;            'res_model': 'res.partner',&#10;            'view_mode': 'form',&#10;            'views': [(address_form_id, 'form')],&#10;            'res_id': self.parent_id.id,&#10;            'target': 'new',&#10;            'flags': {'form': {'action_buttons': True}}}" description="打开指定视图" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_table" value="_table = 'ir_actions'" description="_table = 'ir_actions'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="cr execute dict" value="self._cr.execute(&quot;SELECT id, uom_po_id FROM product_template WHERE id IN %s&quot;, [tuple(self.ids)])&#10;uoms = dict(self._cr.fetchall())" description="查询返回字典" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="compute One2many" value="view_ids = fields.One2many('ir.ui.view', compute='_view_ids', string=u'视图')&#10;&#10;@api.depends()&#10;def _view_ids(self):&#10;    for model in self:&#10;        model.view_ids = self.env['ir.ui.view'].search([('model', '=', model.model)])" description="关联一对多" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="cr execute ids" value="self._cr.execute(&quot;&quot;&quot;SELECT id from ir_model_relation where name = %s&quot;&quot;&quot;, (data.name,))&#10;external_ids = set(x[0] for x in self._cr.fetchall())" description="查询返回 ids" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="orm unlink" value="self.unlink()" description="删除当前记录 self.unlink()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="import logger" value="import logging&#10;_logger = logging.getLogger(__name__)" description="导入日志命名突空间" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="logger info" value="_logger.info('Dropped table %s', table)" description="输出日记" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="order 1" value="_order = 'date_order desc, id desc'" description="_order = 'date_order desc, id desc'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="date_start date_end" value="date_start = fields.Datetime(u'实际开工日期', states=READONLY_STATES, track_visibility='onchange', readonly=True, )&#10;date_end = fields.Datetime(u'实际完工日期', states=READONLY_STATES, track_visibility='onchange', readonly=True, )" description="开始日期与结束日期" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="raise UserError" value="raise UserError(u'警告：')" description="阻断提醒" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields company_id" value="company_id = fields.Many2one('res.company', string=u'公司',&#10;                                 default=lambda self: self.env['res.company']._company_default_get('stock.picking'),&#10;                                 states=READONLY_STATES, track_visibility='onchange')" description="公司" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="target current" value="'target': 'current'," description="当前main窗口" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="target new" value="'target': 'new'," description="弹出窗口" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="target inline" value="'target': 'inline'," description="内联编辑" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="target fullscreen" value="'target': 'fullscreen'," description="全屏" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="target main" value="'target': 'main'," description="当前窗口主要动作" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_description" value="_description = &quot;出库单&quot;" description="表名_description = &quot;销售订单&quot;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="float fields price_unit" value="price_unit = fields.Float(u'单价', required=True, default=0.0,digits=(10, 2))" description="单价" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="workflow fields amoserp" value="@api.depends('workflow_ids', 'workflow_ids.write_date', 'manager_state', 'state')&#10;def _compute_write_id(self):&#10;    for line in self:&#10;        write_id = False&#10;        is_look = False&#10;        records = self.env['amos.workflow'].search(&#10;            [('res_model', '=', self._name), ('res_id', '=', line.id), ('end_date', '=', False)],&#10;            order=&quot;id desc&quot;, limit=1)&#10;        if records:&#10;            write_id = records.user_id.id&#10;            is_look = True&#10;&#10;        if is_look:&#10;            if self._uid != write_id:&#10;                is_look = False&#10;        line.update({'write_id': write_id, 'is_look': is_look})&#10;&#10;write_id = fields.Many2one('res.users', string=u'审批人', store=True, compute='_compute_write_id')&#10;is_look = fields.Boolean(u&quot;审核&quot;, compute='_compute_write_id')&#10;sms_message_ids = fields.One2many('ir.message', 'res_id', domain=lambda self: [('res_model', '=', self._name)],&#10;                                  string=u'消息')&#10;workflow_ids = fields.One2many('amos.workflow', 'res_id', domain=lambda self: [('res_model', '=', self._name)],&#10;                               string=u'审批')&#10;state = fields.Selection(ORDER_STATES, u'单据状态', copy=False, default=u'草稿', track_visibility='onchange')&#10;manager_state = fields.Selection(MANAGER_STATES, u'审批状态', copy=False, default=u'未查阅', track_visibility='onchange')" description="AmosERP工作流字段定义" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="template class" value="111$camelCase$&#10;222$capitalize$&#10;333$capitalizeAndUnderscore$&#10;444$clipboard$&#10;555$clipboard$&#10;666$collectionElementName$&#10;777$clipboard$&#10;888$completeSmart$&#10;999$concat$&#10;aaa$date$&#10;bbb$decapitalize$&#10;ccc$enum$&#10;ddd$escapeString$&#10;eee$fileName$&#10;fff$fileNameWithoutExtension$&#10;ggg$firstWord$&#10;hhh$groovyScript$&#10;iii$lineNumber$&#10;jjj$lowercaseAndDash$&#10;kkk$pyClassName$&#10;lll$pyFunctionName$&#10;mmm$pyIterableVariable$&#10;nnn$snakeCase$&#10;ooo$spaceSeparated$&#10;ppp$time$&#10;qqq$underscoresToCamelCase$&#10;rrr$underscoresToSpaces$&#10;sss$underscoresToSpaces$&#10;ttt$user$&#10;" description="python  类名调用" toReformat="false" toShortenFQNames="true">
    <variable name="camelCase" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="capitalize" expression="capitalize(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="capitalizeAndUnderscore" expression="capitalizeAndUnderscore(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="clipboard" expression="clipboard()" defaultValue="" alwaysStopAt="true" />
    <variable name="collectionElementName" expression="collectionElementName()" defaultValue="" alwaysStopAt="true" />
    <variable name="clipboard" expression="clipboard()" defaultValue="" alwaysStopAt="true" />
    <variable name="completeSmart" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="concat" expression="concat(expressions...)" defaultValue="" alwaysStopAt="true" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="true" />
    <variable name="decapitalize" expression="decapitalize(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="enum" expression="enum(...)" defaultValue="" alwaysStopAt="true" />
    <variable name="escapeString" expression="escapeString(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="fileName" expression="fileName()" defaultValue="" alwaysStopAt="true" />
    <variable name="fileNameWithoutExtension" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="firstWord" expression="firstWord(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="groovyScript" expression="groovyScript(&quot;groovy code&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="lineNumber" expression="lineNumber()" defaultValue="" alwaysStopAt="true" />
    <variable name="lowercaseAndDash" expression="lowercaseAndDash(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <variable name="pyIterableVariable" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="snakeCase" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="spaceSeparated" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="pyFunctionName" expression="pyFunctionName()" defaultValue="" alwaysStopAt="true" />
    <variable name="underscoresToCamelCase" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="underscoresToSpaces" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="user" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button_draft amoserp" value="@api.multi&#10;def button_draft(self, ids):&#10;&#10;    records = self.env['amos.workflow'].search([('end_date', '=', False), ('res_model', '=', self._name),&#10;                                                ('res_id', '=', self.id)])&#10;    if len(records) != 0:&#10;        raise UserError(u'先取消审批流程再重置草稿!')&#10;&#10;    context = dict(self._context or {})&#10;    if context.has_key('errors'):&#10;        if len(context['errors']) &gt; 0:&#10;            raise UserError(context['errors'])&#10;    values = {&#10;        'state': u'草稿',&#10;        'manager_state': u'未查阅',&#10;    }&#10;    self.write(values)&#10;&#10;    return []" description="重置草稿" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button_loading amoserp" value="@api.multi&#10;def button_loading(self, ids):&#10;    if not self.order_line:&#10;        raise UserError(u'请输入产品明细行!')&#10;&#10;    context = dict(self._context or {})&#10;    if context.has_key('errors'):&#10;        if len(context['errors']) &gt; 0:&#10;            raise UserError(context['errors'])&#10;&#10;    self.state = u'处理中'&#10;    return []" description="提交处理中" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="amoswork folw yes no" value="# :::::::::::确认&#10;@api.multi&#10;def object_ok(self, context=None):&#10;    lines = self.browse(int(self._context['active_id']))&#10;    records = self.env['amos.workflow'].search(&#10;        [('res_model', '=', self._name), ('res_id', '=', lines.id), ('user_id', '=', self._uid),&#10;         ('end_date', '=', False)], order=&quot;id desc&quot;, limit=1)&#10;    if len(records) &gt; 0:&#10;&#10;        context = dict(self._context or {})&#10;        if context.has_key('errors'):&#10;            if len(context['errors']) &gt; 0:&#10;&#10;                if self._context.has_key('type'):&#10;                    if self._context['type'] == 'cs':&#10;                        return context['errors']&#10;                else:&#10;                    raise UserError(context['errors'])&#10;&#10;&#10;        values = {&#10;            'end_state': records.end_state,&#10;            'end_date': datetime.now(),&#10;            'state': u'同意',&#10;            'note': self._context['message'],&#10;        }&#10;        records.write(values)&#10;&#10;        #虚拟键用于记录客户购买过的产品&#10;        lines.button_dummy()&#10;&#10;        if records.end_state == u'已审核' and records.start_state != u'已审核':&#10;            if lines.is_free == False:&#10;                values = {&#10;                    'amount_collected': lines.partner_id.amount_collected + lines.amount,&#10;                }&#10;                lines.partner_id.write(values)&#10;            #::::自动化&#10;                lines.button_robot()&#10;&#10;        if records.start_state == u'已审核' and records.end_state != u'已审核':&#10;            if lines.is_free == False:&#10;                values = {&#10;                    'amount_collected': lines.partner_id.amount_collected - lines.amount,&#10;                }&#10;                lines.partner_id.write(values)&#10;&#10;        values = {&#10;            'state': records.end_state,&#10;            'manager_state': u'已读并确认',&#10;        }&#10;        lines.sudo().write(values)&#10;        #::::::通知上级对方已审核&#10;        context = dict(self._context or {})&#10;        context['create_id'] = records.create_id.name&#10;        context['message_template'] = u'%s%s' % (context['message_type'], context['message_template'])&#10;        message = self.env['ir.message'].with_context(context).ding_workflow_send(records.create_id, lines, 2,&#10;                                                                                  records)&#10;        return message&#10;    else:&#10;        tidings = u'错误提示:不存在审批流程!'&#10;        if self._context.has_key('type'):&#10;            if self._context['type'] == 'cs':&#10;                return tidings&#10;        raise UserError(tidings)&#10;&#10;#::::::::::::取消&#10;@api.multi&#10;def object_no(self, context=None):&#10;    line = self.browse(int(self._context['active_id']))&#10;    records = self.env['amos.workflow'].search(&#10;        [('res_model', '=', self._name), ('res_id', '=', line.id), ('user_id', '=', self._uid),&#10;         ('end_date', '=', False)], order=&quot;id desc&quot;, limit=1)&#10;    if len(records) &gt; 0:&#10;        values = {&#10;            'end_date': datetime.now(),&#10;            'state': u'拒绝',&#10;            'note': self._context['message'],&#10;        }&#10;        records.write(values)&#10;&#10;        values = {&#10;            'manager_state': u'已读并拒绝',&#10;            'write_date': False,&#10;        }&#10;        line.sudo().write(values)&#10;        #::::::通知上级对方已审核&#10;        context = dict(self._context or {})&#10;        context['create_id'] = records.create_id.name&#10;        context['message_template'] = u'%s%s' % (context['message_type'], context['message_template'])&#10;        message = self.env['ir.message'].with_context(context).ding_workflow_send(records.create_id, line, 3,&#10;                                                                                  records)&#10;        return message&#10;    else:&#10;        tidings = u'错误提示:不存在审批流程!'&#10;        if self._context.has_key('type'):&#10;            if self._context['type'] == 'cs':&#10;                return tidings&#10;        raise UserError(tidings)&#10;" description="amoserp 审核状态Yes No" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button all state" value="&#10;@api.multi&#10;def action_draft(self):&#10;    self.state = u'草稿'&#10;&#10;@api.multi&#10;def action_review(self):&#10;    self.state = u'等待审批'&#10;&#10;@api.multi&#10;def action_done(self):&#10;    self.state = u'已完成'&#10;&#10;@api.multi&#10;def action_cancel(self):&#10;    self.state = u'取消'" description="amoserp 非工作流审核" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_compute depends amount" value="@api.depends('product_uom_qty', 'price_unit')&#10;def _compute_amount(self):&#10;    for line in self:&#10;        price = line.price_unit * line.product_uom_qty&#10;        line.update({&#10;            'price_subtotal': price,&#10;        })" description="金额合计@api.depends('product_uom_qty', 'price_unit')" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="float fields price_subtotal" value="price_subtotal = fields.Float(compute='_compute_amount', string=u'小计', readonly=True, store=True)" description="字段金额合计" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="selection fields related" value="state = fields.Selection(related='order_id.state', string=u'单据状态', readonly=True, store=True)&#10;" description="关联字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="char fields related" value="product_uom = fields.Char(related='product_id.product_uom', string=u'单位', readonly=True, store=True)" description="关联字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2one fields partner_id" value="partner_id = fields.Many2one('res.partner', string=u'客户',&#10;                                 states=READONLY_STATES, required=True, default=_default_partner_id,&#10;                                 change_default=True, index=True, track_visibility='always')" description="字段客户" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="float fields amount" value="amount = fields.Float(string=u'总计', store=True, readonly=True, compute='_compute_amount',&#10;                          track_visibility='onchange')" description="单头合计" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_compute amount" value="@api.multi&#10;@api.depends('order_line.price_subtotal')&#10;def _compute_amount(self):&#10;    for order in self:&#10;            total = sum(line.price_subtotal for line in order.order_line)&#10;            order.amount = total&#10;" description="单头合计方法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="model amoserp all" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# Odoo Connector&#10;# QQ:35350428&#10;# 邮件:sale@100china.cn&#10;# 手机：13584935775&#10;# 作者：'amos'&#10;# 公司网址： www.odoo.pw  www.100china.cn&#10;# Copyright 昆山一百计算机有限公司 2012-2016 Amos&#10;# 日期：2014-06-18&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;from itertools import groupby&#10;from datetime import datetime, timedelta&#10;from odoo import api, fields, models, _&#10;from odoo.exceptions import UserError&#10;from odoo.tools import float_is_zero, float_compare, DEFAULT_SERVER_DATETIME_FORMAT&#10;from odoo.tools.misc import formatLang&#10;import odoo.addons.decimal_precision as dp&#10;&#10;ORDER_STATES = [&#10;    (u'草稿', u'草稿'),&#10;    (u'处理中', u'处理中'),&#10;    (u'已审核', u'已审核'),&#10;]&#10;MANAGER_STATES = [&#10;    (u'未查阅', u'未查阅'),&#10;    (u'已读并确认', u'已读并确认'),&#10;    (u'已读并拒绝', u'已读并拒绝'),&#10;]&#10;&#10;READONLY_STATES = {&#10;    u'已审核': [('readonly', True)],&#10;    u'处理中': [('readonly', True)],&#10;}&#10;&#10;&#10;class Amos_Template(models.Model):&#10;    _name = &quot;amos.template&quot;&#10;    _description = u&quot;模板主表&quot;&#10;    _inherit = ['mail.thread', 'ir.needaction_mixin']&#10;    _order = 'date_order desc, id desc'&#10;&#10;    @api.depends('workflow_ids', 'workflow_ids.write_date', 'manager_state', 'state')&#10;    def _compute_write_id(self):&#10;        for line in self:&#10;            write_id = False&#10;            is_look = False&#10;            records = self.env['amos.workflow'].search(&#10;                [('res_model', '=', self._name), ('res_id', '=', line.id), ('end_date', '=', False)],&#10;                order=&quot;id desc&quot;, limit=1)&#10;            if records:&#10;                write_id = records.user_id.id&#10;                is_look = True&#10;&#10;            if is_look:&#10;                if self._uid != write_id:&#10;                    is_look = False&#10;            line.update({'write_id': write_id, 'is_look': is_look})&#10;&#10;    @api.multi&#10;    @api.depends('order_line.price_subtotal')&#10;    def _compute_amount(self):&#10;        for order in self:&#10;                total = sum(line.price_subtotal for line in order.order_line)&#10;                order.amount = total&#10;&#10;&#10;    write_id = fields.Many2one('res.users', string=u'审批人', store=True, compute='_compute_write_id')&#10;    is_look = fields.Boolean(u&quot;审核&quot;, compute='_compute_write_id')&#10;    sms_message_ids = fields.One2many('ir.message', 'res_id', domain=lambda self: [('res_model', '=', self._name)],&#10;                                      string=u'消息')&#10;    workflow_ids = fields.One2many('amos.workflow', 'res_id', domain=lambda self: [('res_model', '=', self._name)],&#10;                                   string=u'审批')&#10;    state = fields.Selection(ORDER_STATES, u'单据状态', copy=False, default=u'草稿', track_visibility='onchange')&#10;    manager_state = fields.Selection(MANAGER_STATES, u'审批状态', copy=False, default=u'未查阅', track_visibility='onchange')&#10;&#10;    name = fields.Char(string=u'单据编号', required=True, copy=False, readonly=True, states=READONLY_STATES, index=True,&#10;                       default=lambda self: u'New')&#10;    delivery_date = fields.Date(u'客户交期', track_visibility='onchange', states=READONLY_STATES)&#10;    date_order = fields.Datetime(string=u'单据日期', required=True, readonly=True, index=True, states=READONLY_STATES,&#10;                                 copy=False, default=fields.Datetime.now)&#10;    active = fields.Boolean(default=True, string=u'是否归档', track_visibility='onchange')&#10;    note = fields.Text(u'备注', states=READONLY_STATES, track_visibility='onchange')&#10;    user_id = fields.Many2one('res.users', string=u'负责人', index=True, track_visibility='onchange',&#10;                              default=lambda self: self.env.user, states=READONLY_STATES)&#10;    company_id = fields.Many2one('res.company', string=u'公司', states=READONLY_STATES, track_visibility='onchange',&#10;                                 default=lambda self: self.env['res.company']._company_default_get('stock.picking'))&#10;    partner_id = fields.Many2one('res.partner', string=u'客户', states=READONLY_STATES, required=True,&#10;                                     change_default=True, index=True, track_visibility='always')&#10;    order_line = fields.One2many('amos.template.line', 'order_id', string=u'明细行', states=READONLY_STATES, copy=True,&#10;                                 auto_join=True)&#10;    amount = fields.Float(string=u'总计', store=True, readonly=True, compute='_compute_amount',track_visibility='onchange')&#10;&#10;    origin = fields.Char(string=u'单据来源')&#10;&#10;    _sql_constraints = [&#10;        ('name_uniq', 'unique(name, company_id)', u'名称与公司必须唯一!'),&#10;    ]&#10;&#10;    @api.model&#10;    def create(self, vals):&#10;        if vals.get('name', 'New') == 'New':&#10;            if 'company_id' in vals:&#10;                vals['name'] = self.env['ir.sequence'].with_context(force_company=vals['company_id']).next_by_code(&#10;                    self._name) or 'New'&#10;            else:&#10;                vals['name'] = self.env['ir.sequence'].next_by_code(self._name) or 'New'&#10;        line = super(Amos_Template, self).create(vals)&#10;        #:::::如果创建有编号就提交到查询库 开始&#10;        values = {&#10;            'name': vals['name'].upper(),&#10;            'odd_numbers': vals['name'].upper(),&#10;            'ref': self._name + ',' + str(line.id),&#10;        }&#10;        self.env['global.search'].sudo().create(values)&#10;        #:::::结束&#10;        return line&#10;&#10;    @api.multi&#10;    def unlink(self):&#10;        for order in self:&#10;            if order.state != u'草稿':&#10;                raise UserError(u'只能删除草稿单据!')&#10;            self.env['amos.workflow'].sudo().search(&#10;                [('res_model', '=', self._name), ('res_id', '=', order.id)]).unlink()&#10;            self.env['ir.message'].sudo().search([('res_model', '=', self._name), ('res_id', '=', order.id)]).unlink()&#10;        return super(Amos_Template, self).unlink()&#10;&#10;&#10;    @api.multi&#10;    def button_draft(self, ids):&#10;&#10;        records = self.env['amos.workflow'].search([('end_date', '=', False), ('res_model', '=', self._name),&#10;                                                    ('res_id', '=', self.id)])&#10;        if len(records) != 0:&#10;            raise UserError(u'先取消审批流程再重置草稿!')&#10;&#10;        context = dict(self._context or {})&#10;        if context.has_key('errors'):&#10;            if len(context['errors']) &gt; 0:&#10;                raise UserError(context['errors'])&#10;        values = {&#10;            'state': u'草稿',&#10;            'manager_state': u'未查阅',&#10;        }&#10;        self.write(values)&#10;&#10;        return []&#10;&#10;&#10;    @api.multi&#10;    def button_loading(self, ids):&#10;        if not self.order_line:&#10;            raise UserError(u'请输入产品明细行!')&#10;&#10;        context = dict(self._context or {})&#10;        if context.has_key('errors'):&#10;            if len(context['errors']) &gt; 0:&#10;                raise UserError(context['errors'])&#10;&#10;        self.state = u'处理中'&#10;        return []&#10;&#10;&#10;    # :::::::::::确认&#10;    @api.multi&#10;    def object_ok(self, context=None):&#10;        lines = self.browse(int(self._context['active_id']))&#10;        records = self.env['amos.workflow'].search(&#10;            [('res_model', '=', self._name), ('res_id', '=', lines.id), ('user_id', '=', self._uid),&#10;             ('end_date', '=', False)], order=&quot;id desc&quot;, limit=1)&#10;        if len(records) &gt; 0:&#10;&#10;            context = dict(self._context or {})&#10;            if context.has_key('errors'):&#10;                if len(context['errors']) &gt; 0:&#10;&#10;                    if self._context.has_key('type'):&#10;                        if self._context['type'] == 'cs':&#10;                            return context['errors']&#10;                    else:&#10;                        raise UserError(context['errors'])&#10;&#10;&#10;            values = {&#10;                'end_state': records.end_state,&#10;                'end_date': datetime.now(),&#10;                'state': u'同意',&#10;                'note': self._context['message'],&#10;            }&#10;            records.write(values)&#10;&#10;            #虚拟键&#10;            # lines.button_dummy()&#10;            # if records.end_state == u'已审核' and records.start_state != u'已审核':&#10;            #     pass&#10;            #&#10;            # if records.start_state == u'已审核' and records.end_state != u'已审核':&#10;            #     pass&#10;&#10;            values = {&#10;                'state': records.end_state,&#10;                'manager_state': u'已读并确认',&#10;            }&#10;            lines.sudo().write(values)&#10;            #::::::通知上级对方已审核&#10;            context = dict(self._context or {})&#10;            context['create_id'] = records.create_id.name&#10;            context['message_template'] = u'%s%s' % (context['message_type'], context['message_template'])&#10;            message = self.env['ir.message'].with_context(context).ding_workflow_send(records.create_id, lines, 2,&#10;                                                                                      records)&#10;            return message&#10;        else:&#10;            tidings = u'错误提示:不存在审批流程!'&#10;            if self._context.has_key('type'):&#10;                if self._context['type'] == 'cs':&#10;                    return tidings&#10;            raise UserError(tidings)&#10;&#10;    #::::::::::::取消&#10;    @api.multi&#10;    def object_no(self, context=None):&#10;        line = self.browse(int(self._context['active_id']))&#10;        records = self.env['amos.workflow'].search(&#10;            [('res_model', '=', self._name), ('res_id', '=', line.id), ('user_id', '=', self._uid),&#10;             ('end_date', '=', False)], order=&quot;id desc&quot;, limit=1)&#10;        if len(records) &gt; 0:&#10;            values = {&#10;                'end_date': datetime.now(),&#10;                'state': u'拒绝',&#10;                'note': self._context['message'],&#10;            }&#10;            records.write(values)&#10;&#10;            values = {&#10;                'manager_state': u'已读并拒绝',&#10;                'write_date': False,&#10;            }&#10;            line.sudo().write(values)&#10;            #::::::通知上级对方已审核&#10;            context = dict(self._context or {})&#10;            context['create_id'] = records.create_id.name&#10;            context['message_template'] = u'%s%s' % (context['message_type'], context['message_template'])&#10;            message = self.env['ir.message'].with_context(context).ding_workflow_send(records.create_id, line, 3,&#10;                                                                                      records)&#10;            return message&#10;        else:&#10;            tidings = u'错误提示:不存在审批流程!'&#10;            if self._context.has_key('type'):&#10;                if self._context['type'] == 'cs':&#10;                    return tidings&#10;            raise UserError(tidings)&#10;&#10;&#10;class Amos_Template_Line(models.Model):&#10;    _name = &quot;amos.template.line&quot;&#10;    _description = u&quot;模板单身明细&quot;&#10;    _order = 'order_id desc, sequence, id'&#10;&#10;    @api.depends('product_uom_qty', 'price_unit')&#10;    def _compute_amount(self):&#10;        for line in self:&#10;            price = line.price_unit * line.product_uom_qty&#10;            line.update({&#10;                'price_subtotal': price,&#10;            })&#10;&#10;    order_id = fields.Many2one('amos.template', string=u'销售订单', ondelete='cascade', index=True, copy=False)&#10;    sequence = fields.Integer(string=u'排序', default=10)&#10;    name = fields.Char(string=u'产品全称', )&#10;    product_id = fields.Many2one('product.product', string=u'产品', ondelete='restrict', required=True,&#10;                                 domain=[('sale_ok', '=', True), ('state', '=', u'已审核')], change_default=True)&#10;    product_uom_qty = fields.Float(string=u'数量', required=True, default=1.0)&#10;    product_uom = fields.Char(related='product_id.product_uom', string=u'单位', readonly=True, store=True)&#10;    price_unit = fields.Float(u'单价', required=True, default=0.0, digits=(10, 2))&#10;    price_subtotal = fields.Float(compute='_compute_amount', string=u'小计', readonly=True, store=True)&#10;    note = fields.Text(u'备注')&#10;    state = fields.Selection(related='order_id.state', string=u'单据状态', readonly=True, store=True)&#10;&#10;    @api.multi&#10;    @api.onchange('product_id')&#10;    def onchange_product_id(self):&#10;        if not self.product_id:&#10;            return {'domain': {'product_uom': []}}&#10;        values = {}&#10;        if self.product_id:&#10;            values['product_uom'] = self.product_id.uom_id.name&#10;            name = self.product_id.name&#10;            if self.product_id.default_code:&#10;                name = '[' + self.product_id.default_code + ']' + name&#10;            if self.product_id.specification:&#10;                name = name + ' ' + self.product_id.specification&#10;            values['name'] = name&#10;        self.update(values)&#10;" description="标准的AmosERP 上下表结构" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="has_key" value="if self._context.has_key('default_self_service'):&#10;    pass" description="self._context.has_key" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="has_group" value="if not self.env['res.users'].has_group('Amos_MRP.mrp_bom_users'):&#10;    raise ValidationError(u'无权:需要 [BOM-用户] 权限')" description="self.env['res.users'].has_group('Amos_MRP.mrp_bom_users')" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="wizard context" value="context = dict(self._context or {})&#10;active_id = context.get('active_id')&#10;active_model = context.get('active_model')&#10;mrp = self.env[active_model].browse(active_id)" description="向导上级对象实例化" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields files" value="files = fields.Binary('文件', filters='*.xlsx', required=True)" description="附件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self.ensure_one" value="self.ensure_one()" description="一次执行一条记录" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="orm with_context" value="with_context(lang=None)" description="上下文传值with_context(lang=None)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="str replace" value="str.replace('.', '_')" description="str.replace('.', '_')" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="with_context create" value="with_context(create=True)" description="上下文 with_context(create=True)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self message_post" value="self.message_post(body=u'Hi Amos')" description="发消息self.message_post(body=msg)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self env user" value="self.env.user" description="当前用户self.env.user" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self env lang" value="self.env.lang" description="当前用户self.env.lang" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self env in_draft" value="self.env.in_draft" description="是否草稿self.env.in_draft" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self env in_onchange" value="self.env.in_onchange" description="是否触发模式self.env.in_onchange" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="raise exceptions redirectWarning" value="action = self.env.ref('base.action_res_users')&#10;msg = u&quot;你不能在这里创建一个新的用户.\n 要创建一个新用户，请转到配置面板.&quot;&#10;raise exceptions.RedirectWarning(msg, action.id, u'跳至面板')" description="弹出出警告并提供一个跳转窗口按钮" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="raise except_osv" value="raise odoo.osv.osv.except_osv(u'标题', u'AmosERP2 是基于Odoo开发而来！')" description="带标题的警告" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="return warning" value="warning = {}&#10;if product:&#10;    title = _(&quot;Warning for %s&quot;) % product.name&#10;    message = product.sale_line_warn_msg&#10;    warning['title'] = title&#10;    warning['message'] = message&#10;    result = {'warning': warning}&#10;    return result" description="返回警告" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="access_rights_uid" value="self.sudo(access_rights_uid or self._uid).check_access_rights('read')" description="绕过访问权限检查 放在查询前面" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="search access_rights_uid SUPERUSER_ID" value="sub_ids = self._search([], order=order, access_rights_uid=SUPERUSER_ID)" description="使用超级管理员协助查询" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="lambda user" value="lambda self: self.env.user" description="lambda self: self.env.user" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="super check_access_rights" value="super(Message, self.sudo(access_rights_uid or self._uid)).check_access_rights('read')" description="使用管理员执行相关事件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def read" value="@api.multi&#10;def read(self, fields=None, load='_classic_read'):&#10;    &quot;&quot;&quot; 绕过当前ORM. &quot;&quot;&quot;&#10;    self.check_access_rule('read')&#10;    return super($pyClassName$, self).read(fields=fields, load=load)" description="数据读取" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2many write" value="'groups': [(6, 0, [context.get('group_id')])]," description="many2many修改'groups': [(6, 0, [context.get('group_id')])]," toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_log_access" value="_log_access = False" description="不创建基本字段_log_access = False" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="model in fields" value="if 'state' in self.pool.models[self.model_id.model]._fields:&#10;    #对象是不是存在某个字段&#10;else:&#10;    raise UserError(u'警告：对象不存在审批字段')" description="对象是不是存在某个字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="onchange many2one domain" value="@api.onchange('model_id')&#10;def _change_model_id(self):&#10;    &quot;&quot;&quot;from odoo.osv import expression&quot;&quot;&quot;&#10;    if not self.model_id:&#10;        return {'domain': {'field_id': expression.FALSE_DOMAIN, 'field_date_id': expression.FALSE_DOMAIN}}&#10;    model_fields_domain = [&#10;        ('store', '=', True),&#10;        '|', ('model_id', '=', self.model_id.id),&#10;             ('model_id', 'in', self.model_id.inherited_model_ids.ids)]&#10;    model_date_fields_domain = expression.AND([[('ttype', 'in', ('date', 'datetime'))], model_fields_domain])&#10;    return {'domain': {'field_id': model_fields_domain, 'field_date_id': model_date_fields_domain}}&#10;" description="onchange过滤many2one字段值" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def active" value="@api.multi&#10;def toggle_active(self):&#10;    for record in self:&#10;        record.active = not record.active" description="归档改写" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="python replace" value="a.replace('word','python')" description="字符串替换 a.replace('word','python')" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="wizard models transientModel" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# Odoo Connector&#10;# QQ:35350428&#10;# 邮件:sale@100china.cn&#10;# 手机：13584935775&#10;# 作者：'amos'&#10;# 公司网址： www.odoo.pw  www.100china.cn&#10;# Copyright 昆山一百计算机有限公司 2012-2016 Amos&#10;# 日期：2014-06-18&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;&#10;import uuid&#10;from datetime import datetime&#10;from odoo import api, fields, models, _&#10;from odoo.addons import decimal_precision as dp&#10;from odoo.exceptions import UserError&#10;from odoo.tools import float_compare, float_round&#10;&#10;&#10;class ir_actions_act_window_wizard(models.TransientModel):&#10;    _name = 'ir.actions.act_window.wizard'&#10;    _description = u'批量添加动作'&#10;    _log_access = False&#10;&#10;    model_ids = fields.Many2many('ir.model', 'ir_actions_act_window_wizard_ir_model_rel', 'wizard_id', 'model_id')&#10;&#10;    @api.multi&#10;    def action_done(self):&#10;        for line in self.model_ids:&#10;            name = u'menu_' + line.model.replace('.', '_') + '_' + str(line.id)&#10;            domain = [('key2', '=', 'client_action_multi'),('name', '=', name)]&#10;            rows_count = self.env['ir.values'].search_count(domain)&#10;            if rows_count == 0:&#10;                values = {&#10;                    'name': name,&#10;                    'model_id': u'',&#10;                    'model': line.model,&#10;                    'res_id': u'',&#10;                    'key2': u'client_action_multi',&#10;                    'action_id': u'',&#10;                    'value_unpickle': u'ir.actions.act_window,%s' % (self._context['active_id']),&#10;                }&#10;                self.env['ir.values'].sudo().create(values)&#10;&#10;        return True&#10;" description="向导 完整标准模板" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="split" value="a.split(&quot;#&quot;)" description="分割" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="todo" value="# TODO(amos): 支持返回多个列" description="TODO 注释  Alt + 6 快捷键" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="res partner count order" value="# -*- coding: utf-8 -*-&#10;from odoo import fields, models&#10;&#10;class res_partner(models.Model):&#10;    _inherit = 'res.partner'&#10;&#10;    sale_order_count = fields.Integer(compute='_compute_sale_order_count', string=u'订单数量')&#10;    sale_order_ids = fields.One2many('sale.order', 'partner_id', u'销售订单')&#10;&#10;    def _compute_sale_order_count(self):&#10;        sale_data = self.env['sale.order'].read_group(domain=[('partner_id', 'child_of', self.ids)],&#10;                                                      fields=['partner_id'], groupby=['partner_id'])&#10;        partner_child_ids = self.read(['child_ids'])&#10;        mapped_data = dict([(m['partner_id'][0], m['partner_id_count']) for m in sale_data])&#10;        for partner in self:&#10;            partner_ids = filter(lambda r: r['id'] == partner.id, partner_child_ids)[0]&#10;            partner_ids = [partner_ids.get('id')] + partner_ids.get('child_ids')&#10;            partner.sale_order_count = sum(mapped_data.get(child, 0) for child in partner_ids)&#10;&#10;&#10;" description="业务伙伴上统计单据数量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="python list append" value="list1.append('c')" description="列表增加元素" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_get product" value="product_id.name_get()[0][1]" description="返回产品名称" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class read" value="    @api.multi&#10;    def read(self, fields=None, load='_classic_read'):&#10;        &quot;&quot;&quot; 直接跳过ORM. &quot;&quot;&quot;&#10;        self.check_access_rule('read')&#10;        return super($pyClassName$, self).read(fields=fields, load=load)" description="直接跳过ORM" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_get search" value="model_name = self.env['ir.model'].search([('model', '=', model)]).name_get()[0][1]" description="查询并返回name_get" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_get browse" value="document_name = self.env[model].browse(res_id).name_get()[0][1]" description="browse返回name_get" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_get user" value="user_name = self.env.user.name_get()[0][1]" description="self.env.user.name_get()[0][1]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button compute" value="@api.multi&#10;def button_compute(self):&#10;    return True" description="计算按钮" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self.check unlink" value="self.check_access_rule('unlink')" description="跳过unlink权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self.check create" value="self.check_access_rule('create')" description="跳过create权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self.check write" value="self.check_access_rule('write')" description="跳过write权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self.check read" value="self.check_access_rule('read')" description="跳过read权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self cr execute delete" value="self._cr.execute(&quot;DELETE FROM res_partner WHERE id=%s AND active is False&quot;, (partner.id,))&#10;self.invalidate_cache()" description="sql 删除记录并清空缓存" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self cr execute update" value="self._cr.execute('UPDATE sale_order '\&#10;                       'SET state=%s '\&#10;                       'WHERE id IN %s', ('草稿', tuple(self.ids),))&#10;self.invalidate_cache()" description="sql 更新记录并清空缓存" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self message_post1" value="self.message_post(body=’Hi Amos’)" description="记录消息" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self message_subscribe_users" value="self.message_subscribe_users(user_ids=[self.user_id.id])" description="添加user 为关注对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self message_subscribe" value="self.message_subscribe(partner_ids=partners.ids)" description="批量添加partner 为关注对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self message_unsubscribe_users" value="self.message_unsubscribe_users(user_ids=[self.user_id.id])" description="取消user 关注对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self message_unsubscribe" value="self.sudo().message_unsubscribe(partner_ids)&#10;" description="批量取消partner 关注对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="many2many 4" value="'color_ids': [(4,id)]," description="为id=ID的数据添加主从链接关系[(4,color_id)]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="date_start date_end duration" value="    # date_end = date_start + duration&#10;    # duration = date_end - date_start&#10;    date_start = fields.Date(string=u&quot;开始日期&quot;)&#10;    date_end = fields.Date(string=u&quot;结束日期&quot;, store=True,compute='_get_date_end', inverse='_set_date_end')&#10;    duration = fields.Integer(string=u'持续时间(天)', default=0)&#10;&#10;    @api.depends('date_start', 'duration')&#10;    def _get_date_end(self):&#10;        for r in self:&#10;            if not (r.date_start and r.duration):&#10;                r.date_end = r.date_start&#10;                continue&#10;            start = fields.Datetime.from_string(r.date_start)&#10;            duration = timedelta(days=r.duration, seconds=-1)&#10;            r.date_end = start + duration&#10;&#10;    def _set_date_end(self):&#10;        for r in self:&#10;            if not (r.date_start and r.date_end):&#10;                continue&#10;                date_start = fields.Datetime.from_string(r.date_start)&#10;                date_end = fields.Datetime.from_string(r.date_end)&#10;            r.duration = (date_end - date_start).days + 1" description="两个日期计算 持续天数" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields groups" value="groups='Amos_Product.group_purchase_price'" description="字段加权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields reference" value="@api.model&#10;def _select_reference(self):&#10;    records = self.env['ir.model'].search([])&#10;    return [(record.model, record.name) for record in records] + [('', '')]&#10;&#10;ref_id = fields.Reference(string=u'关联', selection='_select_reference')" description="关联字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self cr commit" value="self._cr.commit()" description="提交当前对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="init v11" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# AmosERP odoo11.0&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'odoo'&#10;# 公司网址： www.odoo.pw  www.100china.cn www.amoserp.com&#10;# Copyright 昆山一百计算机有限公司 2012-2018 Amos&#10;# 日期：$date$&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;{&#10;&#10;from . import models&#10;from . import controllers&#10;from . import report&#10;from . import wizard&#10;&#10;from functools import partial&#10;import odoo&#10;from odoo import api, SUPERUSER_ID&#10;&#10;&#10;&#10;def uninstall_hook(cr, registry):&#10;    def update_dashboard_graph_model(dbname):&#10;        db_registry = odoo.modules.registry.Registry.new(dbname)&#10;        with api.Environment.manage(), db_registry.cursor() as cr:&#10;            env = api.Environment(cr, SUPERUSER_ID, {})&#10;            if 'crm.team' in env:&#10;                recs = env['crm.team'].search([])&#10;                for rec in recs:&#10;                    rec._onchange_team_type()&#10;&#10;    cr.after(&quot;commit&quot;, partial(update_dashboard_graph_model, cr.dbname))&#10;" description="初启化 引入相关模块" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="manifest v11" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# AmosERP odoo11.0&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'odoo'&#10;# 公司网址： www.odoo.pw  www.100china.cn www.amoserp.com&#10;# Copyright 昆山一百计算机有限公司 2012-2018 Amos&#10;# 日期：$date$&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;&#10;&#10;{&#10;    'name': u'模板名称',&#10;    'version': '1.1',&#10;    'category': u'amoserp',&#10;    'summary': u'功能说明',&#10;    'sequence': 0,&#10;    'author': 'Amos',&#10;    'website': 'http://i.youku.com/amoserp',&#10;    'depends': ['base'],&#10;    'data': [&#10;        'data/ir_sequence_data.xml',&#10;        'data/sale_data.xml',&#10;        'report/report_all_channels_sales_views.xml',&#10;        'security/sale_security.xml',&#10;        'security/ir.model.access.csv',&#10;        'wizard/sale_make_invoice_advance_views.xml',&#10;        'views/sale_views.xml',&#10;    ],&#10;    'demo': [&#10;        'data/sale_demo.xml',&#10;        'data/product_product_demo.xml',&#10;    ],&#10;    'uninstall_hook': &quot;uninstall_hook&quot;,&#10;    'css': ['static/src/css/sale.css'],&#10;    'installable': True,&#10;    'application': True,&#10;    'auto_install': False,&#10;    'description': &quot;&quot;&quot;&#10;详细说明&#10;    &quot;&quot;&quot;,&#10;}" description="模块定义与说明" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="models v11" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# AmosERP odoo11.0&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'odoo'&#10;# 公司网址： www.odoo.pw  www.100china.cn www.amoserp.com&#10;# Copyright 昆山一百计算机有限公司 2012-2018 Amos&#10;# 日期：$date$&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;&#10;# 功能说明&#10;&#10;import uuid&#10;from itertools import groupby&#10;from datetime import datetime, timedelta&#10;from werkzeug.urls import url_encode&#10;from odoo import api, fields, models, _&#10;from odoo.exceptions import UserError, AccessError&#10;from odoo.osv import expression&#10;from odoo.tools import float_is_zero, float_compare, DEFAULT_SERVER_DATETIME_FORMAT&#10;from odoo.tools.misc import formatLang&#10;from odoo.addons import decimal_precision as dp&#10;&#10;&#10;class SaleOrder(models.Model):&#10;    _name = &quot;sale.order&quot;&#10;    _inherit = ['mail.thread', 'mail.activity.mixin', 'portal.mixin']&#10;    _description = &quot;Quotation&quot;&#10;    _order = 'date_order desc, id desc'" description="定义对象" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields char access_token" value="def _get_default_access_token(self):&#10;    return str(uuid.uuid4())&#10;&#10;access_token = fields.Char(u'安全令牌', copy=False,default=_get_default_access_token)" description="uuid4自动编号" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="name_get context" value="@api.multi&#10;def name_get(self):&#10;    if self._context.get('sale_show_partner_name'):&#10;        res = []&#10;        for order in self:&#10;            name = order.name&#10;            if order.partner_id.name:&#10;                name = '%s - %s' % (name, order.partner_id.name)&#10;            res.append((order.id, name))&#10;        return res&#10;    return super($pyClassName$, self).name_get()" description="根据上下文判断显示不同的 显色名称" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print report" value="&#10;@api.multi&#10;def print_quotation(self):&#10;    self.filtered(lambda s: s.state == 'draft').write({'state': 'sent'})&#10;    return self.env.ref('sale.action_report_saleorder').report_action(self)" description="根据定义的报名ID进行打印,这里可以做一个记数器" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="action button" value="@api.multi&#10;def action_draft(self):&#10;    orders = self.filtered(lambda s: s.state in ['cancel', 'sent'])&#10;    return orders.write({&#10;        'state': 'draft',&#10;    })&#10;&#10;@api.multi&#10;def action_cancel(self):&#10;    return self.write({'state': 'cancel'})&#10;    &#10;@api.multi&#10;def action_done(self):&#10;    return self.write({'state': 'done'})" description="状态修改" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields domain" value="domain=&quot;[('type', '=', 'opportunity')]&quot;" description="fields domain" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields monetary" value="&#10;margin = fields.Monetary(compute='_product_margin', help=&quot;It gives profitability by calculating the difference between the Unit Price and the cost.&quot;, currency_field='currency_id', digits=dp.get_precision('Product Price'), store=True)&#10;&#10;@api.depends('order_line.margin')&#10;def _product_margin(self):&#10;    for order in self:&#10;        order.margin = sum(order.order_line.filtered(lambda r: r.state != 'cancel').mapped('margin'))&#10;" description="金额合计 Monetary" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields html" value="content = fields.Html(u'正文', strip_style=True)&#10;" description="带编辑器的字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields selection" value="priority = fields.Selection([&#10;        ('0', u'低'),&#10;        ('1', u'正常'),&#10;        ('2', u'高'),&#10;        ], default='0', index=True, string=u&quot;优先级&quot;)" description="下拉单选" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="default sequence" value="default=lambda self: self.env['ir.sequence'].next_by_code(self._name) or 'New'" description="字段上定义自动编号" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs default  datetime days" value=" default=lambda self: datetime.strptime(fields.Datetime.now(),DEFAULT_SERVER_DATETIME_FORMAT) + timedelta(days=1)" description="日期加1天" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="default user1" value="default=lambda self: self.env.user" description="字段属性当前用户" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class button object all" value="&#10;@api.multi&#10;def button_loading_draft(self):&#10;    return self.write({'state': u'草稿'})&#10;&#10;@api.multi&#10;def button_done_draft(self):&#10;    return self.write({'state': u'草稿'})&#10;&#10;@api.multi&#10;def button_loading(self):&#10;    return self.write({'state': u'处理中'})&#10;&#10;@api.multi&#10;def button_done(self):&#10;    return self.write({'state': u'处审核'})&#10;&#10;@api.multi&#10;def button_cancel(self):&#10;    return self.write({'state': u'取消'})" description="标准审批全部按键" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="states readonly" value="readonly=True,states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}" description="需要字段只读配合使用" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class inherit mail v11" value="_inherit = ['mail.thread', 'mail.activity.mixin', 'portal.mixin']" description="继承社交" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="track_visibility always" value=" track_visibility='always'" description="消息一直显示" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields default context" value="default=lambda self: self.env.context.get('type')" description="字段上下文取默认值" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button action draft" value="&#10;@api.multi&#10;def action_draft(self):&#10;    self.write({'state': u'草稿'})&#10;&#10;@api.multi&#10;def action_loading(self):&#10;    self.write({'state': u'处理中'})&#10;&#10;@api.multi&#10;def action_done(self):&#10;    self.write({'state': u'已审核'})&#10;&#10;@api.multi&#10;def action_cancel(self):&#10;    self.write({'state': u'取消'})" description="后台状态组合确认事件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields map" value="name = fields.Char('name')&#10;image = fields.Binary(u&quot;图片&quot;, attachment=True)&#10;image_medium = fields.Binary(u&quot;中等图片&quot;, attachment=True)&#10;image_small = fields.Binary(u&quot;小图片&quot;, attachment=True)&#10;longitude = fields.Float(string=u'经度', digits=(20, 6))&#10;latitude = fields.Float(string=u'纬度', digits=(20, 6))&#10;&#10;color = fields.Selection([&#10;    ('brown', u'棕色'),&#10;    ('red', u'红色'),&#10;    ('orange', u'橙色'),&#10;    ('yellow', u'黄色'),&#10;    ('green', u'绿色'),&#10;    ('blue', u'蓝色'),&#10;    ('purple', u'紫色'),&#10;    ('gray', u'灰色'),&#10;    ('white', u'白色'),&#10;    ('black', u'黑色'),&#10;    ('olive', u'橄榄色'),&#10;    ('lime', u'石灰色'),&#10;    ('navy', u'海军蓝'),&#10;    ('maroon', u'栗色'),&#10;    ('fuchsia', u'紫红'),&#10;    ('silver', u'银色'),&#10;    ('aqna', u'水色'),&#10;],&#10;    string=u&quot;颜色&quot;, default='red')" description="地图相关字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="access rights rule cache write" value="self.check_access_rights('write')&#10;self.check_access_rule('write')&#10;&#10;self._cr.execute('UPDATE account_move SET state=%s  WHERE id IN %s', ('draft', tuple(self.ids),))&#10;self.invalidate_cache()" description="绕过write权限 sql更新 并清空缓存" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="access rule write" value="self.check_access_rights('write')&#10;self.check_access_rule('write')" description="绕过write权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="access rule create" value="self.check_access_rights('create')&#10;self.check_access_rule('create')" description="绕过create权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="access rule unlink" value="self.check_access_rights('unlink')&#10;self.check_access_rule('unlink')" description="绕过unlink权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="access rule read" value="self.check_access_rights('read')&#10;self.check_access_rule('read')" description="绕过read权限" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class read password" value="    @api.multi&#10;    def read(self, fields=None, load='_classic_read'):&#10;        result = super($pyClassName$, self).read(fields=fields, load=load)&#10;        for vals in result:&#10;            if 'name' in vals:&#10;                vals['name'] = '********'&#10;            return result" description="值隐藏" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields color" value="color = fields.Integer(u'显色指数', default=0)" description="颜色字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def search" value="@api.model&#10;def search(self, args, offset=0, limit=None, order=None, count=False):&#10;    # add explicit ordering if search is sorted on full_name&#10;    if order and order.startswith('full_name'):&#10;        groups = super(Groups, self).search(args)&#10;        groups = groups.sorted('full_name', reverse=order.endswith('DESC'))&#10;        groups = groups[offset:offset+limit] if limit else groups[offset:]&#10;        return len(groups) if count else groups.ids&#10;    return super(Groups, self).search(args, offset=offset, limit=limit, order=order, count=count)" description="查询 修改" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self _cr commit" value="self._cr.commit()" description="提交" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="threaded thread" value="def _procure_calculation_orderpoint(self):&#10;    with api.Environment.manage():&#10;        # As this function is in a new thread, I need to open a new cursor, because the old one may be closed&#10;        new_cr = self.pool.cursor()&#10;        self = self.with_env(self.env(cr=new_cr))&#10;        scheduler_cron = self.sudo().env.ref('stock.ir_cron_scheduler_action')&#10;        # Avoid to run the scheduler multiple times in the same time&#10;        try:&#10;            with tools.mute_logger('odoo.sql_db'):&#10;                self._cr.execute(&quot;SELECT id FROM ir_cron WHERE id = %s FOR UPDATE NOWAIT&quot;, (scheduler_cron.id,))&#10;        except Exception:&#10;            _logger.info('Attempt to run procurement scheduler aborted, as already running')&#10;            self._cr.rollback()&#10;            self._cr.close()&#10;            return {}&#10;&#10;        for company in self.env.user.company_ids:&#10;            self.env['procurement.group'].run_scheduler(&#10;                use_new_cursor=self._cr.dbname,&#10;                company_id=company.id)&#10;        new_cr.close()&#10;        return {}&#10;&#10;def procure_calculation(self):&#10;    import threading&#10;    threaded_calculation = threading.Thread(target=self._procure_calculation_orderpoint, args=())&#10;    threaded_calculation.start()&#10;    return {'type': 'ir.actions.act_window_close'}&#10;" description="自定义线程" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class default_get" value="@api.model&#10;def default_get(self, fields):&#10;    res = super($pyClassName$, self).default_get(fields)&#10;    line = self.env[self._context['active_model']].sudo().browse(self._context['active_ids'])&#10;    lines = []&#10;    for o in line:&#10;        if o.type == 'service':&#10;            pass&#10;        else:&#10;            pram = {&#10;                'product_id': o.id,&#10;                'attribute_id': o.attribute_id.id,&#10;                'product_uom': o.product_uom,&#10;                'color_ids': [(6, 0, o.color_ids.ids)],&#10;            }&#10;            lines.append((0, 0, pram))&#10;&#10;    res.update({'product_color_lines': lines, })&#10;    return res" description="初启化值" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def view_init" value="&#10;@api.model&#10;def view_init(self, fields):&#10;    &quot;&quot;&quot;&#10;    配合default_get 做第一次操作时的校验&#10;    这里假设:线索关闭就不许创建当前单据&#10;    :param fields:&#10;    :return:&#10;    &quot;&quot;&quot;&#10;    for lead in self.env['crm.lead'].browse(self._context.get('active_ids', [])):&#10;        if lead.probability == 100:&#10;            raise UserError(u&quot;线索已关闭不能转化为销售订单.&quot;)&#10;    return False" description="创建时校验转入单据是否满足要求" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def view_header_get" value="    @api.model&#10;    def view_header_get(self, view_id, view_type):&#10;        res = super($pyClassName$, self).view_header_get(view_id, view_type)&#10;        if self._context.get('categ_id'):&#10;            return _('Products: ') + self.env['product.category'].browse(self._context['categ_id']).name&#10;        return res" description="在不同的条件上显示不同的窗体标题" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def fields_view_get toolbar" value="@api.model&#10;def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):&#10;    &quot;&quot;&quot;&#10;    Overrides orm field_view_get.&#10;    @return: Dictionary of Fields, arch and toolbar.&#10;    &quot;&quot;&quot;&#10;&#10;    res = super($pyClassName$, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)&#10;&#10;    custom_view = self.env['ir.ui.view.custom'].search([('user_id', '=', self.env.uid), ('ref_id', '=', view_id)], limit=1)&#10;    if custom_view:&#10;        res.update({'custom_view_id': custom_view.id,&#10;                    'arch': custom_view.arch})&#10;    res.update({&#10;        'arch': self._arch_preprocessing(res['arch']),&#10;        'toolbar': {'print': [], 'action': [], 'relate': []}&#10;    })&#10;    return res" description="窗口 打印 action控制" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def get_formview_id1" value="@api.multi&#10;def get_formview_id(self, access_uid=None):&#10;    &quot;&quot;&quot; Update form view id of action to open the invoice &quot;&quot;&quot;&#10;    if self.type in ('in_invoice', 'in_refund'):&#10;        return self.env.ref('account.invoice_supplier_form').id&#10;    else:&#10;        return self.env.ref('account.invoice_form').id" description="根据条件显示不同的窗体" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def get_formview_id2" value="@api.multi&#10;def get_formview_id(self, access_uid=None):&#10;    if self.type == 'opportunity':&#10;        view_id = self.env.ref('crm.crm_case_form_view_oppor').id&#10;    else:&#10;        view_id = super($pyClassName$, self).get_formview_id()&#10;    return view_id" description="根据条件显示不同的窗体 否则显示默认窗口" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def get_access_action" value="&#10;@api.multi&#10;def get_access_action(self, access_uid=None):&#10;    self.ensure_one()&#10;&#10;    if self.state != 'cancel' and (self.state != 'draft' or self.env.context.get('mark_so_as_sent')):&#10;        user, record = self.env.user, self&#10;        if access_uid:&#10;            user = self.env['res.users'].sudo().browse(access_uid)&#10;            record = self.sudo(user)&#10;        if user.share or self.env.context.get('force_website'):&#10;            try:&#10;                record.check_access_rule('read')&#10;            except AccessError:&#10;                if self.env.context.get('force_website'):&#10;                    return {&#10;                        'type': 'ir.actions.act_url',&#10;                        'url': '/my/orders/%s' % self.id,&#10;                        'target': 'self',&#10;                        'res_id': self.id,&#10;                    }&#10;                else:&#10;                    pass&#10;            else:&#10;                return {&#10;                    'type': 'ir.actions.act_url',&#10;                    'url': '/my/orders/%s?access_token=%s' % (self.id, self.access_token),&#10;                    'target': 'self',&#10;                    'res_id': self.id,&#10;                }&#10;    return super($pyClassName$, self).get_access_action(access_uid)" description="修改权限适合门户规则" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def count search_count" value="@api.one&#10;def _count_leads(self):&#10;    if self.id:&#10;        limit_date = datetime.datetime.now() - datetime.timedelta(days=30)&#10;        domain = [('user_id', '=', self.user_id.id),&#10;                  ('team_id', '=', self.team_id.id),&#10;                  ('assign_date', '&gt;', fields.Datetime.to_string(limit_date))&#10;                  ]&#10;        self.leads_count = self.env['crm.lead'].search_count(domain)&#10;    else:&#10;        self.leads_count = 0" description="统计对象数量def _count_leads(self)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self clear_caches" value="self.clear_caches()" description="清空缓存self.clear_caches()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="button print html" value="@api.multi&#10;def button_print(self):&#10;    for record in self:&#10;        ids = record.id&#10;        print_tml = record._name.replace('.', '_') + '.html'&#10;        if self._context.has_key('print_templates'):&#10;            print_tml = self._context['print_templates']&#10;        context = dict(self.env.context or {})&#10;&#10;        if self._context.has_key('active_ids'):&#10;            ids = self._context['active_ids']&#10;        else:&#10;            client_action = {'type': 'ir.actions.act_url',&#10;                             'name': u&quot;套打&quot;,&#10;                             'target': 'new',&#10;                             'nodestroy': True,&#10;                             'url': '/Print?model=%s&amp;id=%s&amp;print_tml=%s&amp;context=%s' % (record._name,ids,print_tml,context),&#10;                             }&#10;        return client_action" description="打印html" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def button_resetting" value="&#10;@api.multi&#10;def button_resetting(self):&#10;    &quot;&quot;&quot;&#10;    重置相关单据状态&#10;    :return: &#10;    &quot;&quot;&quot;&#10;    &#10;    return True&#10;" description="重置相关单据状态" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="orm search many2one" value="self.quant_ids = self.env['stock.quant'].search([('product_id', '=', self.product_id.id),('location_id.usage', '=', 'internal')])" description="domain 前字段使用关联查询" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="self env user name_get" value="user_name = self.env.user.name_get()[0][1]" description="当前用户名称name_get" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields binary image" value="image = fields.Binary(u&quot;图片&quot;, attachment=True)&#10;" description="图片字段" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def name_get translate" value="@api.multi&#10;def name_get(self):&#10;&#10;    res=super($pyClassName$,self).name_get()&#10;    result=[];&#10;    print(self.env.context)&#10;    if self.env.context.get('is_form'):&#10;        for ele in res:&#10;            result.append((ele[0],ele[1] + '-' + self.browse(ele[0]).manager_id.name))&#10;    else:&#10;        result=res&#10;    return  result" description="翻译名称后 追回新显示" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def check end_date start_date" value="@api.constrains('end_date', 'start_date')&#10;def check_date(self):&#10;    for line in self:&#10;        if line.end_date &lt; line.start_date:&#10;            raise exceptions.ValidationError(u&quot;开始日其不能晚于结束日期！&quot;)" description="开始日其不能晚于结束日期" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def write date" value="@api.multi&#10;def write(self, vals):&#10;    if 'start_date' in vals.keys() or 'end_date' in vals.keys():&#10;        for line in self:&#10;            if line.state != '草稿':&#10;                raise exceptions.ValidationError(u&quot;创建后日期不能修改！&quot;)&#10;    return  super($pyClassName$,self).write(vals)" description="修改时校验日期" toReformat="false" toShortenFQNames="true">
    <variable name="pyClassName" expression="pyClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class onchange one2many" value="&#10;@api.multi&#10;@api.onchange('curriculum_id')&#10;def onchange_curriculum_id(self):&#10;    if not self.curriculum_id:&#10;        self.update({&#10;            'order_line': False,&#10;        })&#10;        return&#10;    values = {}&#10;    if self.curriculum_id:&#10;        lines = []&#10;        for o in self.curriculum_id.order_line:&#10;            pram = {&#10;                'name': o.name,&#10;                'product_id': o.product_id.id,&#10;                'product_uom_qty': o.product_uom_qty,&#10;                'product_uom': o.product_uom,&#10;                'price_unit': o.price_unit,&#10;                'price_subtotal': o.price_subtotal,&#10;                'sequence': o.sequence,&#10;            }&#10;            lines.append((0, 0, pram))&#10;&#10;        values['order_line'] = lines&#10;    self.update(values)" description="下拉事件绑定列表" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields default today" value="default=lambda self: fields.Date.today() + ' 00:00:00'" description="00:00:00 时分秒为零" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class def button_print" value="    @api.multi&#10;    def button_print(self):&#10;        print_tml = self._name.replace('.','_')+'.html'&#10;        if self._context.has_key('print_templates'):&#10;            print_tml = self._context['print_templates']&#10;&#10;        context = dict(self.env.context or {})&#10;        client_action = {'type': 'ir.actions.act_url',&#10;                         'name': u&quot;套打&quot;,&#10;                         'target': 'new',&#10;                         'nodestroy': True,&#10;                         'url': '/Print?model=%s&amp;id=%s&amp;print_tml=%s&amp;context=%s' % (self._name,[self.id],print_tml,context),&#10;                         }&#10;        return client_action" description="全局打印" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="context_timestamp" value="date_tz_user = fields.Datetime.context_timestamp(self, fields.Datetime.from_string(dt))" description="长日期转时区" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields One2many compute" value="&#10;assembly_ids = fields.One2many('stock.assembly', compute='_compute_assembly', string=u'组装单',copy=False)&#10;&#10;@api.depends()&#10;def _compute_assembly(self):&#10;    for order in self:&#10;        order.assembly_ids = self.env['stock.assembly'].search([('origin', '=', order.name)])&#10;" description="动态调用明细行" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields One2many attachment ids" value="attachment_ids = fields.One2many('ir.attachment', 'res_id', domain=[('res_model', '=', 'hr.applicant')], string='Attachments')" description="添加附件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_check_company_auto" value="_check_company_auto = True" description="13检查是否存公司 _check_company_auto = True" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="from odoo.addons.base.models.res_partner" value="from odoo.addons.base.models.res_partner import WARNING_MESSAGE, WARNING_HELP&#10;&#10;picking_warn = fields.Selection(WARNING_MESSAGE, 'Stock Picking', help=WARNING_HELP, default='no-message')&#10;&#10;" description="系统参数集中化" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields many2one company_id 13" value="company_id = fields.Many2one('res.company', 'Company', required=True,default=lambda s: s.env.company.id, index=True)&#10;" description="字段公司" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs domain groups_id" value="domain=lambda self: [('groups_id', 'in', self.env.ref('stock.group_stock_user').id)]," description="字段字权过滤" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="_inherit mail" value="_inherit = ['portal.mixin', 'mail.thread', 'mail.activity.mixin', 'utm.mixin']&#10;" description="13社交" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields date date" value="def _default_validity_date(self):&#10;    if self.env['ir.config_parameter'].sudo().get_param('sale.use_quotation_validity_days'):&#10;        days = self.env.company.quotation_validity_days&#10;        if days &gt; 0:&#10;            return fields.Date.to_string(datetime.now() + timedelta(days))&#10;    return False&#10;&#10;validity_date = fields.Date(string='日期', readonly=True, copy=False, default=_default_validity_date)" description="13 支持默认加几天日期" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields text note" value="&#10;@api.model&#10;def _default_note(self):&#10;    return self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms') and self.env.company.invoice_terms or ''&#10;&#10;note = fields.Text('备注', default=_default_note)" description="13 默认备注信息" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="attrs domain company_id" value="domain=&quot;['|', ('company_id', '=', False), ('company_id', '=', company_id)]&quot;,)" description="domain=&quot;['|', ('company_id', '=', False), ('company_id', '=', company_id)]&quot;,)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def name_get 13" value="def name_get(self):&#10;    result = []&#10;    for so_line in self.sudo():&#10;        name = '%s - %s' % (so_line.order_id.name, so_line.name and so_line.name.split('\n')[0] or so_line.product_id.name)&#10;        if so_line.order_partner_id.ref:&#10;            name = '%s (%s)' % (name, so_line.order_partner_id.ref)&#10;        result.append((so_line.id, name))&#10;    return result" description="def name_get(self)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def _name_search" value="@api.model&#10;def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):&#10;    if operator in ('ilike', 'like', '=', '=like', '=ilike'):&#10;        args = expression.AND([&#10;            args or [],&#10;            ['|', ('order_id.name', operator, name), ('name', operator, name)]&#10;        ])&#10;    return super(SaleOrderLine, self)._name_search(name, args=args, operator=operator, limit=limit, name_get_uid=name_get_uid)" description="查询时添加更多条件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields int count" value="sale_order_count = fields.Integer(compute='_compute_sale_order_count', string='销售订单数量')&#10;&#10;def _compute_sale_order_count(self):&#10;    # retrieve all children partners and prefetch 'parent_id' on them&#10;    all_partners = self.search([('id', 'child_of', self.ids)])&#10;    all_partners.read(['parent_id'])&#10;&#10;    sale_order_groups = self.env['sale.order'].read_group(&#10;        domain=[('partner_id', 'in', all_partners.ids)],&#10;        fields=['partner_id'], groupby=['partner_id']&#10;    )&#10;    partners = self.browse()&#10;    for group in sale_order_groups:&#10;        partner = self.browse(group['partner_id'][0])&#10;        while partner:&#10;            if partner in self:&#10;                partner.sale_order_count += group['partner_id_count']&#10;                partners |= partner&#10;            partner = partner.parent_id&#10;    (self - partners).sale_order_count = 0" description="客户统计订单数量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def create models" value="&#10;@api.multi&#10;def create_hd_simple_work(self):&#10;    &quot;&quot;&quot;&#10;    创建简易工作许可证&#10;    :return:&#10;    &quot;&quot;&quot;&#10;    if self.department_id_joggle_users_id.id != self._uid:&#10;        raise UserError(u'警告：你没有权限创建,已分配给：[%s] 创建' % self.department_id_joggle_users_id.name)&#10;&#10;    self.ensure_one()&#10;    context = dict(self._context or {})&#10;    context['active_model'] = 'hd.simple.work'&#10;    context['default_user_id'] = self._uid&#10;    context['default_id_object'] = '%s,%s' % (self._name, self.id)&#10;&#10;    form_id = self.env.ref('hd_problem.odoo_form_hd_simple_work_view').id&#10;    return {'type': 'ir.actions.act_window',&#10;            'res_model': 'hd.simple.work',&#10;            'view_mode': 'form',&#10;            'views': [(form_id, 'form')],&#10;            'target': 'current',&#10;            'context': context,&#10;            'flags': {'form': {'action_buttons': True}}}" description="跳转创建对象def create_res_users(self):" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields many2one compute" value="simple_id = fields.Many2one('hd.simple.work', string=u'简易工作许可证', compute='_complete_simple_id')&#10;&#10;@api.depends()&#10;def _complete_simple_id(self):&#10;    for order in self:&#10;        id_object = '%s,%s' % (self._name, order.id)&#10;        simple = self.env['hd.simple.work'].search([('id_object', '=', id_object)],order=&quot;id desc&quot;, limit=1)&#10;        if simple:&#10;            order.simple_id = simple.id" description="动态计算Many2one值" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields one2many compute" value="complete_report_ids = fields.One2many('hd.complete.report', compute='_complete_report_ids', string=u'完工报告')&#10;&#10;def _complete_report_ids(self):&#10;    for order in self:&#10;        a = []&#10;        id_object = '%s,%s' % (self._name, order.id)&#10;        report = self.env['hd.complete.report'].search([('id_object', '=', id_object)])&#10;        if report:&#10;            for r in report._ids:&#10;                a.append(r)&#10;        order.complete_report_ids = a" description="动态计算One2many值" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class models category" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# AmosERP odoo11.0&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'amos'&#10;# 公司网址： www.odoo.pw  www.100china.cn www.amoserp.com&#10;# Copyright 昆山一百计算机有限公司 2012-2018 Amos&#10;# 日期：2018/09/12 15:01&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;import logging&#10;import re&#10;from odoo import api, fields, models, tools, _&#10;from odoo.exceptions import ValidationError&#10;from odoo.osv import expression&#10;from odoo.tools import float_compare&#10;_logger = logging.getLogger(__name__)&#10;&#10;class product_category(models.Model):&#10;    _name = &quot;product.category&quot;&#10;    _description = &quot;产品分类&quot;&#10;    _parent_name = &quot;parent_id&quot;&#10;    _parent_store = True&#10;    _rec_name = 'complete_name'&#10;    _order = 'complete_name'&#10;&#10;    name = fields.Char('名称', index=True, required=True)&#10;    complete_name = fields.Char('全称', compute='_compute_complete_name',store=True)&#10;    parent_id = fields.Many2one('product.category', '上级分类', index=True, ondelete='cascade')&#10;    parent_path = fields.Char(index=True)&#10;    child_id = fields.One2many('product.category', 'parent_id', '子类集合')&#10;    product_count = fields.Integer('分类数量', compute='_compute_product_count')&#10;&#10;    @api.depends('name', 'parent_id.complete_name')&#10;    def _compute_complete_name(self):&#10;        for category in self:&#10;            if category.parent_id:&#10;                category.complete_name = '%s / %s' % (category.parent_id.complete_name, category.name)&#10;            else:&#10;                category.complete_name = category.name&#10;&#10;    def _compute_product_count(self):&#10;        read_group_res = self.env['product.template'].read_group([('categ_id', 'child_of', self.ids)], ['categ_id'], ['categ_id'])&#10;        group_data = dict((data['categ_id'][0], data['categ_id_count']) for data in read_group_res)&#10;        for categ in self:&#10;            product_count = 0&#10;            for sub_categ_id in categ.search([('id', 'child_of', categ.ids)]).ids:&#10;                product_count += group_data.get(sub_categ_id, 0)&#10;            categ.product_count = product_count&#10;&#10;    @api.constrains('parent_id')&#10;    def _check_category_recursion(self):&#10;        if not self._check_recursion():&#10;            raise ValidationError('不能创建递归的类别')&#10;        return True&#10;&#10;    @api.model&#10;    def name_create(self, name):&#10;        return self.create({'name': name}).name_get()[0]&#10;" description="完整的产品分类带子类" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class models template" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# Odoo Connector&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'amos'&#10;# 公司网址： www.odoo.pw  www.100china.cn  http://i.youku.com/amoserp&#10;# Copyright 昆山一百计算机有限公司 2012-2018 Amos&#10;# 日期：2019/10/26&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;&#10;from odoo import api, fields, models, tools, SUPERUSER_ID, _&#10;&#10;&#10;class ly_template(models.Model):&#10;    _name = 'ly.template'&#10;    _description = '模板'&#10;    name = fields.Char(string='名称', required=True, index=True)&#10;    code = fields.Char(string='编号')&#10;    description = fields.Char(string='描述')&#10;    company_id = fields.Many2one('res.company', string=u'公司',default=lambda self: self.env.user.company_id)&#10;    &#10;    _sql_constraints = [&#10;        ('name_uniq', 'unique(name)', u'名称必须唯一!'),&#10;    ]&#10;" description="属性表" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="coding utf-8" value="# -*- coding: utf-8 -*-&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;# AmosERP odoo11.0&#10;# QQ:35350428&#10;# 邮件:35350428@qq.com&#10;# 手机：13584935775&#10;# 作者：'odoo'&#10;# 公司网址： www.odoo.pw  www.100china.cn www.amoserp.com&#10;# Copyright 昆山一百计算机有限公司 2012-2020 Amos&#10;# 日期：$date$&#10;# &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#10;" description="模块说明# -*- coding: utf-8 -*-" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fields Date today" value="fields.Date.today()" description="ORM 时当前日期fields.Date.today()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="one2main filtered" value="workflow = line.workflow_ids.filtered(lambda t: t.state == '等待审批' and t.user_id.id == self._uid)&#10;" description="一对多过滤" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>